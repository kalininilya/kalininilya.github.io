"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//Pomodoro-timer main-script

var Timer = function () {
  function Timer(workTime, breakTime) {
    _classCallCheck(this, Timer);

    this.defaultWorkTime = workTime;
    this.defaultBreakTime = breakTime;
    this.workTime = workTime;
    this.breakTime = breakTime;
    this.paused = false;
    this.modeBreak = false;
    this.timeout = null;
    this.running = false;
  }

  _createClass(Timer, [{
    key: "formatTime",
    value: function formatTime(time) {
      var seconds = time % 60;
      if (seconds.toString().length == 1) {
        seconds = "0" + seconds;
      }
      return Math.floor(time / 60) + ":" + seconds;
    }
  }, {
    key: "tick",
    value: function tick() {
      var _this = this;

      if (this.workTime === 1) {
        this.modeBreak = true;
        this.workTime = this.defaultWorkTime;
      }
      if (this.breakTime === 1) {
        this.modeBreak = false;
        this.breakTime = this.defaultWorkTime;
      }
      if (!this.paused && !this.modeBreak) {
        this.timeout = setTimeout(function () {
          _this.workTime -= 1;
          _this.renderTimer();
          _this.tick();
        }, 1000);
      }
      if (!this.paused && this.modeBreak) {
        this.timeout = setTimeout(function () {
          _this.breakTime -= 1;
          _this.renderTimer();
          _this.tick();
        }, 1000);
      }
    }
  }, {
    key: "start",
    value: function start() {
      clearTimeout(this.timeout);
      this.workTime = this.defaultWorkTime;
      this.breakTime = this.defaultBreakTime;
      this.paused = false;
      this.running = true;
      this.modeBreak = false;
      document.querySelector(".pause-resume-btn").innerHTML = "pause";
      this.tick();
    }
  }, {
    key: "togglePause",
    value: function togglePause() {
      this.paused = !this.paused;
      if (this.paused && this.running) {
        clearTimeout(this.timeout);
        document.querySelector(".pause-resume-btn").innerHTML = "resume";
      }
      if (!this.paused && this.running) {
        this.tick();
        document.querySelector(".pause-resume-btn").innerHTML = "pause";
      }
    }
  }, {
    key: "renderTimer",
    value: function renderTimer() {
      var percent = this.workTime / this.defaultWorkTime * 100;
      updateCircle(percent, this.formatTime(this.workTime));
    }
  }]);

  return Timer;
}();

function updateCircle(val, caption) {
  var circle = document.querySelector("#svg #bar");
  var r = circle.getAttribute("r");
  var c = Math.PI * (r * 2);
  if (val < 0) {
    val = 0;
  }
  if (val > 100) {
    val = 100;
  }
  var pct = (100 - val) / 100 * c;
  circle.style.strokeDashoffset = pct;
  document.querySelector("#cont").setAttribute("data-pct", caption);
}

var timer = new Timer(1500, 300);

var startBtn = document.querySelector(".start-btn");
startBtn.addEventListener("click", timer.start.bind(timer));
var pauseResumeBtn = document.querySelector(".pause-resume-btn");
pauseResumeBtn.addEventListener("click", timer.togglePause.bind(timer));